
MPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000106  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000097  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000013c  00000000  00000000  000003ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000177  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000076  00000000  00000000  000006cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000741  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  7a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <A_4_1_1>:
//##############################################################################

// A_4_1_1: A/D-Wandler Kanal 0 kontinuierlich einlesen und als 8-Bit-Wert auf
//          den LEDs ausgeben.
void A_4_1_1(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	// IHR_CODE_HIER ...
	ADMUX = 0b00000000;
  8a:	87 e2       	ldi	r24, 0x27	; 39
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	10 82       	st	Z, r1
	ADCSRA = 0b10000111;
  92:	86 e2       	ldi	r24, 0x26	; 38
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	27 e8       	ldi	r18, 0x87	; 135
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
	SFIOR &= ~(111 << ADTS0);
  9c:	80 e5       	ldi	r24, 0x50	; 80
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	20 e5       	ldi	r18, 0x50	; 80
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	20 81       	ld	r18, Z
  a8:	2f 71       	andi	r18, 0x1F	; 31
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
	
	LED_DDR = 0xff;
  ae:	84 e3       	ldi	r24, 0x34	; 52
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
	LED_PORT = 0xff;
  b8:	85 e3       	ldi	r24, 0x35	; 53
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	
	while (1)
	{
		ADCSRA |= 1 << ADSC;
  c2:	86 e2       	ldi	r24, 0x26	; 38
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	26 e2       	ldi	r18, 0x26	; 38
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	20 81       	ld	r18, Z
  ce:	20 64       	ori	r18, 0x40	; 64
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
		
		while (BIT_IS_CLR(ADCSRA, ADSC))
  d4:	00 00       	nop
  d6:	86 e2       	ldi	r24, 0x26	; 38
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	80 81       	ld	r24, Z
  de:	88 2f       	mov	r24, r24
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	80 74       	andi	r24, 0x40	; 64
  e4:	99 27       	eor	r25, r25
  e6:	89 2b       	or	r24, r25
  e8:	b1 f3       	breq	.-20     	; 0xd6 <A_4_1_1+0x54>
		{
		}
		
		LED_PORT = ~(ADCH);
  ea:	85 e3       	ldi	r24, 0x35	; 53
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	25 e2       	ldi	r18, 0x25	; 37
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	20 95       	com	r18
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
	}
  fc:	e2 cf       	rjmp	.-60     	; 0xc2 <A_4_1_1+0x40>

000000fe <main>:
#include "Labor_4/MPT_LAB_4_2.h"
#include "Labor_4/MPT_LAB_4_3.h"


int main(void)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
  //------------------------------------------------------------------------------
  // Aufgabe A_4_1: A/D-Wandler in Betrieb nehmen
  // A_4_1_1: A/D-Wandler Kanal 0 kontinuierlich einlesen und als 8-Bit-Wert auf
  //          den LEDs ausgeben.
  //------------------------------------------------------------------------------
  A_4_1_1();
 106:	0e 94 41 00 	call	0x82	; 0x82 <A_4_1_1>


  while(1)
  {
      //TODO:: Please write your application code 
  }
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0xc>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
