
MPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b94  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  00000b94  00000c08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000557  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000215  00000000  00000000  0000137f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e6  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000271  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c3  00000000  00000000  000020a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000266c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 33       	cpi	r26, 0x30	; 48
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e3       	ldi	r26, 0x30	; 48
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 33       	cpi	r26, 0x30	; 48
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
  8a:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AdcRead>:
			sprintf(String, "Entfernung(1) = %3ld[mm]\n\r", Dist);
			UsartPuts(String);
		}
		
		Wait_x_ms(500);
	}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <AdcRead+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	8b 83       	std	Y+3, r24	; 0x03
  a0:	8b 81       	ldd	r24, Y+3	; 0x03
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	18 f0       	brcs	.+6      	; 0xac <AdcRead+0x1a>
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	41 c0       	rjmp	.+130    	; 0x12e <AdcRead+0x9c>
  ac:	87 e2       	ldi	r24, 0x27	; 39
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	27 e2       	ldi	r18, 0x27	; 39
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	28 7f       	andi	r18, 0xF8	; 248
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
  be:	87 e2       	ldi	r24, 0x27	; 39
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	27 e2       	ldi	r18, 0x27	; 39
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	30 81       	ld	r19, Z
  ca:	2b 81       	ldd	r18, Y+3	; 0x03
  cc:	23 2b       	or	r18, r19
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
  d2:	86 e2       	ldi	r24, 0x26	; 38
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	26 e2       	ldi	r18, 0x26	; 38
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	20 81       	ld	r18, Z
  de:	20 64       	ori	r18, 0x40	; 64
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
  e4:	00 00       	nop
  e6:	86 e2       	ldi	r24, 0x26	; 38
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	80 74       	andi	r24, 0x40	; 64
  f4:	99 27       	eor	r25, r25
  f6:	89 2b       	or	r24, r25
  f8:	b1 f7       	brne	.-20     	; 0xe6 <AdcRead+0x54>
  fa:	84 e2       	ldi	r24, 0x24	; 36
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	80 81       	ld	r24, Z
 102:	82 95       	swap	r24
 104:	86 95       	lsr	r24
 106:	86 95       	lsr	r24
 108:	83 70       	andi	r24, 0x03	; 3
 10a:	28 2f       	mov	r18, r24
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	85 e2       	ldi	r24, 0x25	; 37
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	82 2b       	or	r24, r18
 124:	93 2b       	or	r25, r19
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	9a 81       	ldd	r25, Y+2	; 0x02
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <A_4_3_3>:

//##############################################################################

// A_4_3_3: Einlesen der Messwerte und Ausgabe mittels 20-stufiger Kennlinie.
void A_4_3_3(void)
{
 13a:	6f 92       	push	r6
 13c:	7f 92       	push	r7
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	cb 55       	subi	r28, 0x5B	; 91
 15c:	d1 09       	sbc	r29, r1
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
	uint16_t AdcRes;
	char String[80];

	// AD-Kanal 2
	// Kanal auswählen und in ADMUX maskieren
	AdcChan = 2;
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	8d 83       	std	Y+5, r24	; 0x05
	AdcRes = AdcRead(AdcChan);
 16c:	8d 81       	ldd	r24, Y+5	; 0x05
 16e:	0e 94 49 00 	call	0x92	; 0x92 <AdcRead>
 172:	9f 83       	std	Y+7, r25	; 0x07
 174:	8e 83       	std	Y+6, r24	; 0x06

	// Ausgabe der Ergebnisse auf dem Terminal
	// Berechnung der Werte als Festkommazahl
	AdcRes = (AdcRes * (uint32_t)500)/1024;
 176:	8e 81       	ldd	r24, Y+6	; 0x06
 178:	9f 81       	ldd	r25, Y+7	; 0x07
 17a:	9c 01       	movw	r18, r24
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	84 ef       	ldi	r24, 0xF4	; 244
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	dc 01       	movw	r26, r24
 186:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__muluhisi3>
 18a:	dc 01       	movw	r26, r24
 18c:	cb 01       	movw	r24, r22
 18e:	07 2e       	mov	r0, r23
 190:	7a e0       	ldi	r23, 0x0A	; 10
 192:	b6 95       	lsr	r27
 194:	a7 95       	ror	r26
 196:	97 95       	ror	r25
 198:	87 95       	ror	r24
 19a:	7a 95       	dec	r23
 19c:	d1 f7       	brne	.-12     	; 0x192 <A_4_3_3+0x58>
 19e:	70 2d       	mov	r23, r0
 1a0:	9f 83       	std	Y+7, r25	; 0x07
 1a2:	8e 83       	std	Y+6, r24	; 0x06

	sprintf(String, "AD-Wandlung: Kanal[2] = %d\n\r", AdcRes);
 1a4:	8f 81       	ldd	r24, Y+7	; 0x07
 1a6:	8f 93       	push	r24
 1a8:	8e 81       	ldd	r24, Y+6	; 0x06
 1aa:	8f 93       	push	r24
 1ac:	88 ef       	ldi	r24, 0xF8	; 248
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	89 2f       	mov	r24, r25
 1b2:	8f 93       	push	r24
 1b4:	88 ef       	ldi	r24, 0xF8	; 248
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	8f 93       	push	r24
 1ba:	ce 01       	movw	r24, r28
 1bc:	0c 96       	adiw	r24, 0x0c	; 12
 1be:	29 2f       	mov	r18, r25
 1c0:	2f 93       	push	r18
 1c2:	8f 93       	push	r24
 1c4:	0e 94 de 02 	call	0x5bc	; 0x5bc <sprintf>
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
	UsartPuts(String);
 1d4:	ce 01       	movw	r24, r28
 1d6:	0c 96       	adiw	r24, 0x0c	; 12
 1d8:	0e 94 4d 02 	call	0x49a	; 0x49a <UsartPuts>
	
	uint32_t r = GP2D120_3[16][0];
 1dc:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <GP2D120_3+0x80>
 1e0:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <GP2D120_3+0x81>
 1e4:	a0 91 f2 00 	lds	r26, 0x00F2	; 0x8000f2 <GP2D120_3+0x82>
 1e8:	b0 91 f3 00 	lds	r27, 0x00F3	; 0x8000f3 <GP2D120_3+0x83>
 1ec:	88 87       	std	Y+8, r24	; 0x08
 1ee:	99 87       	std	Y+9, r25	; 0x09
 1f0:	aa 87       	std	Y+10, r26	; 0x0a
 1f2:	bb 87       	std	Y+11, r27	; 0x0b

	// Überführen des Messwertes aus der AD-Wandlung in die reale Entfernung
	{
		int32_t Dist = 0;
 1f4:	19 82       	std	Y+1, r1	; 0x01
 1f6:	1a 82       	std	Y+2, r1	; 0x02
 1f8:	1b 82       	std	Y+3, r1	; 0x03
 1fa:	1c 82       	std	Y+4, r1	; 0x04

		// Entfernung < Minimalentfernung?
		if (AdcRes > GP2D120_1[0][0])						// GP2D120_1[Index_0: Messwert AD-Wandlung][Index_1: reale Entfernung]
 1fc:	8e 81       	ldd	r24, Y+6	; 0x06
 1fe:	9f 81       	ldd	r25, Y+7	; 0x07
 200:	9c 01       	movw	r18, r24
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 20a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 20e:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 212:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 216:	82 17       	cp	r24, r18
 218:	93 07       	cpc	r25, r19
 21a:	a4 07       	cpc	r26, r20
 21c:	b5 07       	cpc	r27, r21
 21e:	6c f4       	brge	.+26     	; 0x23a <A_4_3_3+0x100>
		{
			// Distanz <= 30mm
			Dist = GP2D120_1[0][1];
 220:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 224:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 228:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 22c:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 230:	89 83       	std	Y+1, r24	; 0x01
 232:	9a 83       	std	Y+2, r25	; 0x02
 234:	ab 83       	std	Y+3, r26	; 0x03
 236:	bc 83       	std	Y+4, r27	; 0x04
 238:	a2 c0       	rjmp	.+324    	; 0x37e <A_4_3_3+0x244>
		}
		
		else
		// Entfernung > Maximalentfernung?
		if (AdcRes < GP2D120_1[16][0])
 23a:	8e 81       	ldd	r24, Y+6	; 0x06
 23c:	9f 81       	ldd	r25, Y+7	; 0x07
 23e:	9c 01       	movw	r18, r24
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <GP2D120_3+0x70>
 248:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <GP2D120_3+0x71>
 24c:	a0 91 e2 00 	lds	r26, 0x00E2	; 0x8000e2 <GP2D120_3+0x72>
 250:	b0 91 e3 00 	lds	r27, 0x00E3	; 0x8000e3 <GP2D120_3+0x73>
 254:	28 17       	cp	r18, r24
 256:	39 07       	cpc	r19, r25
 258:	4a 07       	cpc	r20, r26
 25a:	5b 07       	cpc	r21, r27
 25c:	6c f4       	brge	.+26     	; 0x278 <A_4_3_3+0x13e>
		{
			// Distanz >= 400mm
			Dist = GP2D120_1[16][1];
 25e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <GP2D120_3+0x74>
 262:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <GP2D120_3+0x75>
 266:	a0 91 e6 00 	lds	r26, 0x00E6	; 0x8000e6 <GP2D120_3+0x76>
 26a:	b0 91 e7 00 	lds	r27, 0x00E7	; 0x8000e7 <GP2D120_3+0x77>
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	9a 83       	std	Y+2, r25	; 0x02
 272:	ab 83       	std	Y+3, r26	; 0x03
 274:	bc 83       	std	Y+4, r27	; 0x04
 276:	83 c0       	rjmp	.+262    	; 0x37e <A_4_3_3+0x244>
		
		// Entfernung liegt im gültigen Bereich
		else
		{
			// liegt der AD-Messwert auf der Sekante zwischen den ersten beiden Werttupeln? (=Gemessene Entfernung liegt im Intervall [0]....[1])
			if ((AdcRes <= GP2D120_1[0][0]) && (AdcRes >= GP2D120_1[1][0]))
 278:	8e 81       	ldd	r24, Y+6	; 0x06
 27a:	9f 81       	ldd	r25, Y+7	; 0x07
 27c:	9c 01       	movw	r18, r24
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 286:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 28a:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 28e:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 292:	82 17       	cp	r24, r18
 294:	93 07       	cpc	r25, r19
 296:	a4 07       	cpc	r26, r20
 298:	b5 07       	cpc	r27, r21
 29a:	0c f4       	brge	.+2      	; 0x29e <A_4_3_3+0x164>
 29c:	70 c0       	rjmp	.+224    	; 0x37e <A_4_3_3+0x244>
 29e:	8e 81       	ldd	r24, Y+6	; 0x06
 2a0:	9f 81       	ldd	r25, Y+7	; 0x07
 2a2:	9c 01       	movw	r18, r24
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 2ac:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 2b0:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
 2b4:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
 2b8:	28 17       	cp	r18, r24
 2ba:	39 07       	cpc	r19, r25
 2bc:	4a 07       	cpc	r20, r26
 2be:	5b 07       	cpc	r21, r27
 2c0:	0c f4       	brge	.+2      	; 0x2c4 <A_4_3_3+0x18a>
 2c2:	5d c0       	rjmp	.+186    	; 0x37e <A_4_3_3+0x244>
			{
				// Berechnung der Entfernung aus der Sekante zwischen [0]..[1]
				Dist = GP2D120_1[0][1] + ((GP2D120_1[1][1]-GP2D120_1[0][1])*(AdcRes-GP2D120_1[0][0])) / (GP2D120_1[1][0]-GP2D120_1[0][0]);
 2c4:	e0 90 64 00 	lds	r14, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 2c8:	f0 90 65 00 	lds	r15, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 2cc:	00 91 66 00 	lds	r16, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 2d0:	10 91 67 00 	lds	r17, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 2d4:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
 2d8:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
 2dc:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 2e0:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 2e4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 2e8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 2ec:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 2f0:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 2f4:	59 01       	movw	r10, r18
 2f6:	6a 01       	movw	r12, r20
 2f8:	a8 1a       	sub	r10, r24
 2fa:	b9 0a       	sbc	r11, r25
 2fc:	ca 0a       	sbc	r12, r26
 2fe:	db 0a       	sbc	r13, r27
 300:	8e 81       	ldd	r24, Y+6	; 0x06
 302:	9f 81       	ldd	r25, Y+7	; 0x07
 304:	9c 01       	movw	r18, r24
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 30e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 312:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 316:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 31a:	39 01       	movw	r6, r18
 31c:	4a 01       	movw	r8, r20
 31e:	68 1a       	sub	r6, r24
 320:	79 0a       	sbc	r7, r25
 322:	8a 0a       	sbc	r8, r26
 324:	9b 0a       	sbc	r9, r27
 326:	d4 01       	movw	r26, r8
 328:	c3 01       	movw	r24, r6
 32a:	a6 01       	movw	r20, r12
 32c:	95 01       	movw	r18, r10
 32e:	bc 01       	movw	r22, r24
 330:	cd 01       	movw	r24, r26
 332:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__mulsi3>
 336:	5b 01       	movw	r10, r22
 338:	6c 01       	movw	r12, r24
 33a:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 33e:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 342:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
 346:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
 34a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 34e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 352:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 356:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 35a:	28 1b       	sub	r18, r24
 35c:	39 0b       	sbc	r19, r25
 35e:	4a 0b       	sbc	r20, r26
 360:	5b 0b       	sbc	r21, r27
 362:	c6 01       	movw	r24, r12
 364:	b5 01       	movw	r22, r10
 366:	0e 94 a5 02 	call	0x54a	; 0x54a <__divmodsi4>
 36a:	da 01       	movw	r26, r20
 36c:	c9 01       	movw	r24, r18
 36e:	8e 0d       	add	r24, r14
 370:	9f 1d       	adc	r25, r15
 372:	a0 1f       	adc	r26, r16
 374:	b1 1f       	adc	r27, r17
 376:	89 83       	std	Y+1, r24	; 0x01
 378:	9a 83       	std	Y+2, r25	; 0x02
 37a:	ab 83       	std	Y+3, r26	; 0x03
 37c:	bc 83       	std	Y+4, r27	; 0x04
			}
		}
		
		// Ausgabe der Entfernung in [mm]
		sprintf(String, "Entfernung(1) = %3ld[mm]\n\r", Dist);
 37e:	8c 81       	ldd	r24, Y+4	; 0x04
 380:	8f 93       	push	r24
 382:	8b 81       	ldd	r24, Y+3	; 0x03
 384:	8f 93       	push	r24
 386:	8a 81       	ldd	r24, Y+2	; 0x02
 388:	8f 93       	push	r24
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	8f 93       	push	r24
 38e:	85 e1       	ldi	r24, 0x15	; 21
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	89 2f       	mov	r24, r25
 394:	8f 93       	push	r24
 396:	85 e1       	ldi	r24, 0x15	; 21
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	8f 93       	push	r24
 39c:	ce 01       	movw	r24, r28
 39e:	0c 96       	adiw	r24, 0x0c	; 12
 3a0:	29 2f       	mov	r18, r25
 3a2:	2f 93       	push	r18
 3a4:	8f 93       	push	r24
 3a6:	0e 94 de 02 	call	0x5bc	; 0x5bc <sprintf>
 3aa:	8d b7       	in	r24, 0x3d	; 61
 3ac:	9e b7       	in	r25, 0x3e	; 62
 3ae:	08 96       	adiw	r24, 0x08	; 8
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	f8 94       	cli
 3b4:	de bf       	out	0x3e, r29	; 62
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	cd bf       	out	0x3d, r28	; 61
		UsartPuts(String);
 3ba:	ce 01       	movw	r24, r28
 3bc:	0c 96       	adiw	r24, 0x0c	; 12
 3be:	0e 94 4d 02 	call	0x49a	; 0x49a <UsartPuts>
	}
	
	Wait_x_ms(500);
 3c2:	84 ef       	ldi	r24, 0xF4	; 244
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 03 02 	call	0x406	; 0x406 <Wait_x_ms>
}
 3ca:	00 00       	nop
 3cc:	c5 5a       	subi	r28, 0xA5	; 165
 3ce:	df 4f       	sbci	r29, 0xFF	; 255
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	cf 90       	pop	r12
 3ea:	bf 90       	pop	r11
 3ec:	af 90       	pop	r10
 3ee:	9f 90       	pop	r9
 3f0:	8f 90       	pop	r8
 3f2:	7f 90       	pop	r7
 3f4:	6f 90       	pop	r6
 3f6:	08 95       	ret

000003f8 <main>:
#include "Labor_4/MPT_LAB_4_2.h"
#include "Labor_4/MPT_LAB_4_3.h"


int main(void)
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
  // A_4_3_2: Einlesen der Messwerte und Ausgabe mittels 3-stufiger Kennlinie.
  // A_4_3_3: Einlesen der Messwerte und Ausgabe mittels 20-stufiger Kennlinie.
  //------------------------------------------------------------------------------
  //A_4_3_1();
  //A_4_3_2();
  A_4_3_3();
 400:	0e 94 9d 00 	call	0x13a	; 0x13a <A_4_3_3>


  while(1)
  {
      //TODO:: Please write your application code 
  }
 404:	ff cf       	rjmp	.-2      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>

00000406 <Wait_x_ms>:
  UBRRL = (F_CPU/(16*Baudrate)-1) % 256;
  UBRRH = (F_CPU/(16*Baudrate)-1) / 256;

  // Freigabe der Sende-/Empfangs-Kanäle und uC-Pins
  UCSRB |= (1 << RXEN) | (1 << TXEN);
}
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	00 d0       	rcall	.+0      	; 0x40c <Wait_x_ms+0x6>
 40c:	00 d0       	rcall	.+0      	; 0x40e <Wait_x_ms+0x8>
 40e:	00 d0       	rcall	.+0      	; 0x410 <Wait_x_ms+0xa>
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	9e 83       	std	Y+6, r25	; 0x06
 416:	8d 83       	std	Y+5, r24	; 0x05
 418:	1c 82       	std	Y+4, r1	; 0x04
 41a:	1b 82       	std	Y+3, r1	; 0x03
 41c:	12 c0       	rjmp	.+36     	; 0x442 <Wait_x_ms+0x3c>
 41e:	1a 82       	std	Y+2, r1	; 0x02
 420:	19 82       	std	Y+1, r1	; 0x01
 422:	05 c0       	rjmp	.+10     	; 0x42e <Wait_x_ms+0x28>
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	9a 81       	ldd	r25, Y+2	; 0x02
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	9a 83       	std	Y+2, r25	; 0x02
 42c:	89 83       	std	Y+1, r24	; 0x01
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	9a 81       	ldd	r25, Y+2	; 0x02
 432:	88 35       	cpi	r24, 0x58	; 88
 434:	92 40       	sbci	r25, 0x02	; 2
 436:	b0 f3       	brcs	.-20     	; 0x424 <Wait_x_ms+0x1e>
 438:	8b 81       	ldd	r24, Y+3	; 0x03
 43a:	9c 81       	ldd	r25, Y+4	; 0x04
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	9c 83       	std	Y+4, r25	; 0x04
 440:	8b 83       	std	Y+3, r24	; 0x03
 442:	2b 81       	ldd	r18, Y+3	; 0x03
 444:	3c 81       	ldd	r19, Y+4	; 0x04
 446:	8d 81       	ldd	r24, Y+5	; 0x05
 448:	9e 81       	ldd	r25, Y+6	; 0x06
 44a:	28 17       	cp	r18, r24
 44c:	39 07       	cpc	r19, r25
 44e:	38 f3       	brcs	.-50     	; 0x41e <Wait_x_ms+0x18>
 450:	00 00       	nop
 452:	26 96       	adiw	r28, 0x06	; 6
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <UsartPutc>:

/*
 *  1 Zeichen auf USART-Kanal ausgeben
 */
void UsartPutc(uint8_t Data)
{
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	1f 92       	push	r1
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	89 83       	std	Y+1, r24	; 0x01
  while (!(UCSRA & (1 << UDRE)));
 470:	00 00       	nop
 472:	8b e2       	ldi	r24, 0x2B	; 43
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	fc 01       	movw	r30, r24
 478:	80 81       	ld	r24, Z
 47a:	88 2f       	mov	r24, r24
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	80 72       	andi	r24, 0x20	; 32
 480:	99 27       	eor	r25, r25
 482:	89 2b       	or	r24, r25
 484:	b1 f3       	breq	.-20     	; 0x472 <UsartPutc+0xe>
  UDR = Data;
 486:	8c e2       	ldi	r24, 0x2C	; 44
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	29 81       	ldd	r18, Y+1	; 0x01
 48c:	fc 01       	movw	r30, r24
 48e:	20 83       	st	Z, r18
}
 490:	00 00       	nop
 492:	0f 90       	pop	r0
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <UsartPuts>:

/*
 *  String auf USART-Kanal ausgeben
 */
void UsartPuts(char* pString)
{
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <UsartPuts+0x6>
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <UsartPuts+0x8>
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	9c 83       	std	Y+4, r25	; 0x04
 4a8:	8b 83       	std	Y+3, r24	; 0x03
	char* pData = pString;
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	9c 81       	ldd	r25, Y+4	; 0x04
 4ae:	9a 83       	std	Y+2, r25	; 0x02
 4b0:	89 83       	std	Y+1, r24	; 0x01
	
  while (*pData != 0)
 4b2:	0b c0       	rjmp	.+22     	; 0x4ca <UsartPuts+0x30>
  {
    UsartPutc(*pData);
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	9a 81       	ldd	r25, Y+2	; 0x02
 4b8:	fc 01       	movw	r30, r24
 4ba:	80 81       	ld	r24, Z
 4bc:	0e 94 32 02 	call	0x464	; 0x464 <UsartPutc>
	  pData++;
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	9a 83       	std	Y+2, r25	; 0x02
 4c8:	89 83       	std	Y+1, r24	; 0x01
 */
void UsartPuts(char* pString)
{
	char* pData = pString;
	
  while (*pData != 0)
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	9a 81       	ldd	r25, Y+2	; 0x02
 4ce:	fc 01       	movw	r30, r24
 4d0:	80 81       	ld	r24, Z
 4d2:	88 23       	and	r24, r24
 4d4:	79 f7       	brne	.-34     	; 0x4b4 <UsartPuts+0x1a>
  {
    UsartPutc(*pData);
	  pData++;
  }	
}
 4d6:	00 00       	nop
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	0f 90       	pop	r0
 4de:	0f 90       	pop	r0
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <__mulsi3>:
 4e6:	db 01       	movw	r26, r22
 4e8:	8f 93       	push	r24
 4ea:	9f 93       	push	r25
 4ec:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__muluhisi3>
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	a2 9f       	mul	r26, r18
 4f6:	80 0d       	add	r24, r0
 4f8:	91 1d       	adc	r25, r1
 4fa:	a3 9f       	mul	r26, r19
 4fc:	90 0d       	add	r25, r0
 4fe:	b2 9f       	mul	r27, r18
 500:	90 0d       	add	r25, r0
 502:	11 24       	eor	r1, r1
 504:	08 95       	ret

00000506 <__udivmodsi4>:
 506:	a1 e2       	ldi	r26, 0x21	; 33
 508:	1a 2e       	mov	r1, r26
 50a:	aa 1b       	sub	r26, r26
 50c:	bb 1b       	sub	r27, r27
 50e:	fd 01       	movw	r30, r26
 510:	0d c0       	rjmp	.+26     	; 0x52c <__udivmodsi4_ep>

00000512 <__udivmodsi4_loop>:
 512:	aa 1f       	adc	r26, r26
 514:	bb 1f       	adc	r27, r27
 516:	ee 1f       	adc	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	a2 17       	cp	r26, r18
 51c:	b3 07       	cpc	r27, r19
 51e:	e4 07       	cpc	r30, r20
 520:	f5 07       	cpc	r31, r21
 522:	20 f0       	brcs	.+8      	; 0x52c <__udivmodsi4_ep>
 524:	a2 1b       	sub	r26, r18
 526:	b3 0b       	sbc	r27, r19
 528:	e4 0b       	sbc	r30, r20
 52a:	f5 0b       	sbc	r31, r21

0000052c <__udivmodsi4_ep>:
 52c:	66 1f       	adc	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	88 1f       	adc	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	1a 94       	dec	r1
 536:	69 f7       	brne	.-38     	; 0x512 <__udivmodsi4_loop>
 538:	60 95       	com	r22
 53a:	70 95       	com	r23
 53c:	80 95       	com	r24
 53e:	90 95       	com	r25
 540:	9b 01       	movw	r18, r22
 542:	ac 01       	movw	r20, r24
 544:	bd 01       	movw	r22, r26
 546:	cf 01       	movw	r24, r30
 548:	08 95       	ret

0000054a <__divmodsi4>:
 54a:	05 2e       	mov	r0, r21
 54c:	97 fb       	bst	r25, 7
 54e:	1e f4       	brtc	.+6      	; 0x556 <__divmodsi4+0xc>
 550:	00 94       	com	r0
 552:	0e 94 bc 02 	call	0x578	; 0x578 <__negsi2>
 556:	57 fd       	sbrc	r21, 7
 558:	07 d0       	rcall	.+14     	; 0x568 <__divmodsi4_neg2>
 55a:	0e 94 83 02 	call	0x506	; 0x506 <__udivmodsi4>
 55e:	07 fc       	sbrc	r0, 7
 560:	03 d0       	rcall	.+6      	; 0x568 <__divmodsi4_neg2>
 562:	4e f4       	brtc	.+18     	; 0x576 <__divmodsi4_exit>
 564:	0c 94 bc 02 	jmp	0x578	; 0x578 <__negsi2>

00000568 <__divmodsi4_neg2>:
 568:	50 95       	com	r21
 56a:	40 95       	com	r20
 56c:	30 95       	com	r19
 56e:	21 95       	neg	r18
 570:	3f 4f       	sbci	r19, 0xFF	; 255
 572:	4f 4f       	sbci	r20, 0xFF	; 255
 574:	5f 4f       	sbci	r21, 0xFF	; 255

00000576 <__divmodsi4_exit>:
 576:	08 95       	ret

00000578 <__negsi2>:
 578:	90 95       	com	r25
 57a:	80 95       	com	r24
 57c:	70 95       	com	r23
 57e:	61 95       	neg	r22
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	08 95       	ret

00000588 <__umulhisi3>:
 588:	a2 9f       	mul	r26, r18
 58a:	b0 01       	movw	r22, r0
 58c:	b3 9f       	mul	r27, r19
 58e:	c0 01       	movw	r24, r0
 590:	a3 9f       	mul	r26, r19
 592:	70 0d       	add	r23, r0
 594:	81 1d       	adc	r24, r1
 596:	11 24       	eor	r1, r1
 598:	91 1d       	adc	r25, r1
 59a:	b2 9f       	mul	r27, r18
 59c:	70 0d       	add	r23, r0
 59e:	81 1d       	adc	r24, r1
 5a0:	11 24       	eor	r1, r1
 5a2:	91 1d       	adc	r25, r1
 5a4:	08 95       	ret

000005a6 <__muluhisi3>:
 5a6:	0e 94 c4 02 	call	0x588	; 0x588 <__umulhisi3>
 5aa:	a5 9f       	mul	r26, r21
 5ac:	90 0d       	add	r25, r0
 5ae:	b4 9f       	mul	r27, r20
 5b0:	90 0d       	add	r25, r0
 5b2:	a4 9f       	mul	r26, r20
 5b4:	80 0d       	add	r24, r0
 5b6:	91 1d       	adc	r25, r1
 5b8:	11 24       	eor	r1, r1
 5ba:	08 95       	ret

000005bc <sprintf>:
 5bc:	ae e0       	ldi	r26, 0x0E	; 14
 5be:	b0 e0       	ldi	r27, 0x00	; 0
 5c0:	e4 ee       	ldi	r30, 0xE4	; 228
 5c2:	f2 e0       	ldi	r31, 0x02	; 2
 5c4:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__prologue_saves__+0x1c>
 5c8:	0d 89       	ldd	r16, Y+21	; 0x15
 5ca:	1e 89       	ldd	r17, Y+22	; 0x16
 5cc:	86 e0       	ldi	r24, 0x06	; 6
 5ce:	8c 83       	std	Y+4, r24	; 0x04
 5d0:	1a 83       	std	Y+2, r17	; 0x02
 5d2:	09 83       	std	Y+1, r16	; 0x01
 5d4:	8f ef       	ldi	r24, 0xFF	; 255
 5d6:	9f e7       	ldi	r25, 0x7F	; 127
 5d8:	9e 83       	std	Y+6, r25	; 0x06
 5da:	8d 83       	std	Y+5, r24	; 0x05
 5dc:	ae 01       	movw	r20, r28
 5de:	47 5e       	subi	r20, 0xE7	; 231
 5e0:	5f 4f       	sbci	r21, 0xFF	; 255
 5e2:	6f 89       	ldd	r22, Y+23	; 0x17
 5e4:	78 8d       	ldd	r23, Y+24	; 0x18
 5e6:	ce 01       	movw	r24, r28
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	0e 94 00 03 	call	0x600	; 0x600 <vfprintf>
 5ee:	ef 81       	ldd	r30, Y+7	; 0x07
 5f0:	f8 85       	ldd	r31, Y+8	; 0x08
 5f2:	e0 0f       	add	r30, r16
 5f4:	f1 1f       	adc	r31, r17
 5f6:	10 82       	st	Z, r1
 5f8:	2e 96       	adiw	r28, 0x0e	; 14
 5fa:	e4 e0       	ldi	r30, 0x04	; 4
 5fc:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__epilogue_restores__+0x1c>

00000600 <vfprintf>:
 600:	ab e0       	ldi	r26, 0x0B	; 11
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	e6 e0       	ldi	r30, 0x06	; 6
 606:	f3 e0       	ldi	r31, 0x03	; 3
 608:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__prologue_saves__>
 60c:	6c 01       	movw	r12, r24
 60e:	7b 01       	movw	r14, r22
 610:	8a 01       	movw	r16, r20
 612:	fc 01       	movw	r30, r24
 614:	17 82       	std	Z+7, r1	; 0x07
 616:	16 82       	std	Z+6, r1	; 0x06
 618:	83 81       	ldd	r24, Z+3	; 0x03
 61a:	81 ff       	sbrs	r24, 1
 61c:	cc c1       	rjmp	.+920    	; 0x9b6 <__stack+0x157>
 61e:	ce 01       	movw	r24, r28
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	3c 01       	movw	r6, r24
 624:	f6 01       	movw	r30, r12
 626:	93 81       	ldd	r25, Z+3	; 0x03
 628:	f7 01       	movw	r30, r14
 62a:	93 fd       	sbrc	r25, 3
 62c:	85 91       	lpm	r24, Z+
 62e:	93 ff       	sbrs	r25, 3
 630:	81 91       	ld	r24, Z+
 632:	7f 01       	movw	r14, r30
 634:	88 23       	and	r24, r24
 636:	09 f4       	brne	.+2      	; 0x63a <vfprintf+0x3a>
 638:	ba c1       	rjmp	.+884    	; 0x9ae <__stack+0x14f>
 63a:	85 32       	cpi	r24, 0x25	; 37
 63c:	39 f4       	brne	.+14     	; 0x64c <vfprintf+0x4c>
 63e:	93 fd       	sbrc	r25, 3
 640:	85 91       	lpm	r24, Z+
 642:	93 ff       	sbrs	r25, 3
 644:	81 91       	ld	r24, Z+
 646:	7f 01       	movw	r14, r30
 648:	85 32       	cpi	r24, 0x25	; 37
 64a:	29 f4       	brne	.+10     	; 0x656 <vfprintf+0x56>
 64c:	b6 01       	movw	r22, r12
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 654:	e7 cf       	rjmp	.-50     	; 0x624 <vfprintf+0x24>
 656:	91 2c       	mov	r9, r1
 658:	21 2c       	mov	r2, r1
 65a:	31 2c       	mov	r3, r1
 65c:	ff e1       	ldi	r31, 0x1F	; 31
 65e:	f3 15       	cp	r31, r3
 660:	d8 f0       	brcs	.+54     	; 0x698 <vfprintf+0x98>
 662:	8b 32       	cpi	r24, 0x2B	; 43
 664:	79 f0       	breq	.+30     	; 0x684 <vfprintf+0x84>
 666:	38 f4       	brcc	.+14     	; 0x676 <vfprintf+0x76>
 668:	80 32       	cpi	r24, 0x20	; 32
 66a:	79 f0       	breq	.+30     	; 0x68a <vfprintf+0x8a>
 66c:	83 32       	cpi	r24, 0x23	; 35
 66e:	a1 f4       	brne	.+40     	; 0x698 <vfprintf+0x98>
 670:	23 2d       	mov	r18, r3
 672:	20 61       	ori	r18, 0x10	; 16
 674:	1d c0       	rjmp	.+58     	; 0x6b0 <vfprintf+0xb0>
 676:	8d 32       	cpi	r24, 0x2D	; 45
 678:	61 f0       	breq	.+24     	; 0x692 <vfprintf+0x92>
 67a:	80 33       	cpi	r24, 0x30	; 48
 67c:	69 f4       	brne	.+26     	; 0x698 <vfprintf+0x98>
 67e:	23 2d       	mov	r18, r3
 680:	21 60       	ori	r18, 0x01	; 1
 682:	16 c0       	rjmp	.+44     	; 0x6b0 <vfprintf+0xb0>
 684:	83 2d       	mov	r24, r3
 686:	82 60       	ori	r24, 0x02	; 2
 688:	38 2e       	mov	r3, r24
 68a:	e3 2d       	mov	r30, r3
 68c:	e4 60       	ori	r30, 0x04	; 4
 68e:	3e 2e       	mov	r3, r30
 690:	2a c0       	rjmp	.+84     	; 0x6e6 <vfprintf+0xe6>
 692:	f3 2d       	mov	r31, r3
 694:	f8 60       	ori	r31, 0x08	; 8
 696:	1d c0       	rjmp	.+58     	; 0x6d2 <vfprintf+0xd2>
 698:	37 fc       	sbrc	r3, 7
 69a:	2d c0       	rjmp	.+90     	; 0x6f6 <vfprintf+0xf6>
 69c:	20 ed       	ldi	r18, 0xD0	; 208
 69e:	28 0f       	add	r18, r24
 6a0:	2a 30       	cpi	r18, 0x0A	; 10
 6a2:	40 f0       	brcs	.+16     	; 0x6b4 <vfprintf+0xb4>
 6a4:	8e 32       	cpi	r24, 0x2E	; 46
 6a6:	b9 f4       	brne	.+46     	; 0x6d6 <vfprintf+0xd6>
 6a8:	36 fc       	sbrc	r3, 6
 6aa:	81 c1       	rjmp	.+770    	; 0x9ae <__stack+0x14f>
 6ac:	23 2d       	mov	r18, r3
 6ae:	20 64       	ori	r18, 0x40	; 64
 6b0:	32 2e       	mov	r3, r18
 6b2:	19 c0       	rjmp	.+50     	; 0x6e6 <vfprintf+0xe6>
 6b4:	36 fe       	sbrs	r3, 6
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <vfprintf+0xc4>
 6b8:	8a e0       	ldi	r24, 0x0A	; 10
 6ba:	98 9e       	mul	r9, r24
 6bc:	20 0d       	add	r18, r0
 6be:	11 24       	eor	r1, r1
 6c0:	92 2e       	mov	r9, r18
 6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <vfprintf+0xe6>
 6c4:	ea e0       	ldi	r30, 0x0A	; 10
 6c6:	2e 9e       	mul	r2, r30
 6c8:	20 0d       	add	r18, r0
 6ca:	11 24       	eor	r1, r1
 6cc:	22 2e       	mov	r2, r18
 6ce:	f3 2d       	mov	r31, r3
 6d0:	f0 62       	ori	r31, 0x20	; 32
 6d2:	3f 2e       	mov	r3, r31
 6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <vfprintf+0xe6>
 6d6:	8c 36       	cpi	r24, 0x6C	; 108
 6d8:	21 f4       	brne	.+8      	; 0x6e2 <vfprintf+0xe2>
 6da:	83 2d       	mov	r24, r3
 6dc:	80 68       	ori	r24, 0x80	; 128
 6de:	38 2e       	mov	r3, r24
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <vfprintf+0xe6>
 6e2:	88 36       	cpi	r24, 0x68	; 104
 6e4:	41 f4       	brne	.+16     	; 0x6f6 <vfprintf+0xf6>
 6e6:	f7 01       	movw	r30, r14
 6e8:	93 fd       	sbrc	r25, 3
 6ea:	85 91       	lpm	r24, Z+
 6ec:	93 ff       	sbrs	r25, 3
 6ee:	81 91       	ld	r24, Z+
 6f0:	7f 01       	movw	r14, r30
 6f2:	81 11       	cpse	r24, r1
 6f4:	b3 cf       	rjmp	.-154    	; 0x65c <vfprintf+0x5c>
 6f6:	98 2f       	mov	r25, r24
 6f8:	9f 7d       	andi	r25, 0xDF	; 223
 6fa:	95 54       	subi	r25, 0x45	; 69
 6fc:	93 30       	cpi	r25, 0x03	; 3
 6fe:	28 f4       	brcc	.+10     	; 0x70a <vfprintf+0x10a>
 700:	0c 5f       	subi	r16, 0xFC	; 252
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	9f e3       	ldi	r25, 0x3F	; 63
 706:	99 83       	std	Y+1, r25	; 0x01
 708:	0d c0       	rjmp	.+26     	; 0x724 <vfprintf+0x124>
 70a:	83 36       	cpi	r24, 0x63	; 99
 70c:	31 f0       	breq	.+12     	; 0x71a <vfprintf+0x11a>
 70e:	83 37       	cpi	r24, 0x73	; 115
 710:	71 f0       	breq	.+28     	; 0x72e <vfprintf+0x12e>
 712:	83 35       	cpi	r24, 0x53	; 83
 714:	09 f0       	breq	.+2      	; 0x718 <vfprintf+0x118>
 716:	59 c0       	rjmp	.+178    	; 0x7ca <vfprintf+0x1ca>
 718:	21 c0       	rjmp	.+66     	; 0x75c <vfprintf+0x15c>
 71a:	f8 01       	movw	r30, r16
 71c:	80 81       	ld	r24, Z
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	0e 5f       	subi	r16, 0xFE	; 254
 722:	1f 4f       	sbci	r17, 0xFF	; 255
 724:	88 24       	eor	r8, r8
 726:	83 94       	inc	r8
 728:	91 2c       	mov	r9, r1
 72a:	53 01       	movw	r10, r6
 72c:	13 c0       	rjmp	.+38     	; 0x754 <vfprintf+0x154>
 72e:	28 01       	movw	r4, r16
 730:	f2 e0       	ldi	r31, 0x02	; 2
 732:	4f 0e       	add	r4, r31
 734:	51 1c       	adc	r5, r1
 736:	f8 01       	movw	r30, r16
 738:	a0 80       	ld	r10, Z
 73a:	b1 80       	ldd	r11, Z+1	; 0x01
 73c:	36 fe       	sbrs	r3, 6
 73e:	03 c0       	rjmp	.+6      	; 0x746 <vfprintf+0x146>
 740:	69 2d       	mov	r22, r9
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x14a>
 746:	6f ef       	ldi	r22, 0xFF	; 255
 748:	7f ef       	ldi	r23, 0xFF	; 255
 74a:	c5 01       	movw	r24, r10
 74c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <strnlen>
 750:	4c 01       	movw	r8, r24
 752:	82 01       	movw	r16, r4
 754:	f3 2d       	mov	r31, r3
 756:	ff 77       	andi	r31, 0x7F	; 127
 758:	3f 2e       	mov	r3, r31
 75a:	16 c0       	rjmp	.+44     	; 0x788 <vfprintf+0x188>
 75c:	28 01       	movw	r4, r16
 75e:	22 e0       	ldi	r18, 0x02	; 2
 760:	42 0e       	add	r4, r18
 762:	51 1c       	adc	r5, r1
 764:	f8 01       	movw	r30, r16
 766:	a0 80       	ld	r10, Z
 768:	b1 80       	ldd	r11, Z+1	; 0x01
 76a:	36 fe       	sbrs	r3, 6
 76c:	03 c0       	rjmp	.+6      	; 0x774 <vfprintf+0x174>
 76e:	69 2d       	mov	r22, r9
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <vfprintf+0x178>
 774:	6f ef       	ldi	r22, 0xFF	; 255
 776:	7f ef       	ldi	r23, 0xFF	; 255
 778:	c5 01       	movw	r24, r10
 77a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <strnlen_P>
 77e:	4c 01       	movw	r8, r24
 780:	f3 2d       	mov	r31, r3
 782:	f0 68       	ori	r31, 0x80	; 128
 784:	3f 2e       	mov	r3, r31
 786:	82 01       	movw	r16, r4
 788:	33 fc       	sbrc	r3, 3
 78a:	1b c0       	rjmp	.+54     	; 0x7c2 <vfprintf+0x1c2>
 78c:	82 2d       	mov	r24, r2
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	88 16       	cp	r8, r24
 792:	99 06       	cpc	r9, r25
 794:	b0 f4       	brcc	.+44     	; 0x7c2 <vfprintf+0x1c2>
 796:	b6 01       	movw	r22, r12
 798:	80 e2       	ldi	r24, 0x20	; 32
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 7a0:	2a 94       	dec	r2
 7a2:	f4 cf       	rjmp	.-24     	; 0x78c <vfprintf+0x18c>
 7a4:	f5 01       	movw	r30, r10
 7a6:	37 fc       	sbrc	r3, 7
 7a8:	85 91       	lpm	r24, Z+
 7aa:	37 fe       	sbrs	r3, 7
 7ac:	81 91       	ld	r24, Z+
 7ae:	5f 01       	movw	r10, r30
 7b0:	b6 01       	movw	r22, r12
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 7b8:	21 10       	cpse	r2, r1
 7ba:	2a 94       	dec	r2
 7bc:	21 e0       	ldi	r18, 0x01	; 1
 7be:	82 1a       	sub	r8, r18
 7c0:	91 08       	sbc	r9, r1
 7c2:	81 14       	cp	r8, r1
 7c4:	91 04       	cpc	r9, r1
 7c6:	71 f7       	brne	.-36     	; 0x7a4 <vfprintf+0x1a4>
 7c8:	e8 c0       	rjmp	.+464    	; 0x99a <__stack+0x13b>
 7ca:	84 36       	cpi	r24, 0x64	; 100
 7cc:	11 f0       	breq	.+4      	; 0x7d2 <vfprintf+0x1d2>
 7ce:	89 36       	cpi	r24, 0x69	; 105
 7d0:	41 f5       	brne	.+80     	; 0x822 <vfprintf+0x222>
 7d2:	f8 01       	movw	r30, r16
 7d4:	37 fe       	sbrs	r3, 7
 7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <vfprintf+0x1e6>
 7d8:	60 81       	ld	r22, Z
 7da:	71 81       	ldd	r23, Z+1	; 0x01
 7dc:	82 81       	ldd	r24, Z+2	; 0x02
 7de:	93 81       	ldd	r25, Z+3	; 0x03
 7e0:	0c 5f       	subi	r16, 0xFC	; 252
 7e2:	1f 4f       	sbci	r17, 0xFF	; 255
 7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <vfprintf+0x1f6>
 7e6:	60 81       	ld	r22, Z
 7e8:	71 81       	ldd	r23, Z+1	; 0x01
 7ea:	07 2e       	mov	r0, r23
 7ec:	00 0c       	add	r0, r0
 7ee:	88 0b       	sbc	r24, r24
 7f0:	99 0b       	sbc	r25, r25
 7f2:	0e 5f       	subi	r16, 0xFE	; 254
 7f4:	1f 4f       	sbci	r17, 0xFF	; 255
 7f6:	f3 2d       	mov	r31, r3
 7f8:	ff 76       	andi	r31, 0x6F	; 111
 7fa:	3f 2e       	mov	r3, r31
 7fc:	97 ff       	sbrs	r25, 7
 7fe:	09 c0       	rjmp	.+18     	; 0x812 <vfprintf+0x212>
 800:	90 95       	com	r25
 802:	80 95       	com	r24
 804:	70 95       	com	r23
 806:	61 95       	neg	r22
 808:	7f 4f       	sbci	r23, 0xFF	; 255
 80a:	8f 4f       	sbci	r24, 0xFF	; 255
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	f0 68       	ori	r31, 0x80	; 128
 810:	3f 2e       	mov	r3, r31
 812:	2a e0       	ldi	r18, 0x0A	; 10
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	a3 01       	movw	r20, r6
 818:	0e 94 33 05 	call	0xa66	; 0xa66 <__ultoa_invert>
 81c:	88 2e       	mov	r8, r24
 81e:	86 18       	sub	r8, r6
 820:	45 c0       	rjmp	.+138    	; 0x8ac <__stack+0x4d>
 822:	85 37       	cpi	r24, 0x75	; 117
 824:	31 f4       	brne	.+12     	; 0x832 <vfprintf+0x232>
 826:	23 2d       	mov	r18, r3
 828:	2f 7e       	andi	r18, 0xEF	; 239
 82a:	b2 2e       	mov	r11, r18
 82c:	2a e0       	ldi	r18, 0x0A	; 10
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	25 c0       	rjmp	.+74     	; 0x87c <__stack+0x1d>
 832:	93 2d       	mov	r25, r3
 834:	99 7f       	andi	r25, 0xF9	; 249
 836:	b9 2e       	mov	r11, r25
 838:	8f 36       	cpi	r24, 0x6F	; 111
 83a:	c1 f0       	breq	.+48     	; 0x86c <__stack+0xd>
 83c:	18 f4       	brcc	.+6      	; 0x844 <vfprintf+0x244>
 83e:	88 35       	cpi	r24, 0x58	; 88
 840:	79 f0       	breq	.+30     	; 0x860 <__stack+0x1>
 842:	b5 c0       	rjmp	.+362    	; 0x9ae <__stack+0x14f>
 844:	80 37       	cpi	r24, 0x70	; 112
 846:	19 f0       	breq	.+6      	; 0x84e <vfprintf+0x24e>
 848:	88 37       	cpi	r24, 0x78	; 120
 84a:	21 f0       	breq	.+8      	; 0x854 <vfprintf+0x254>
 84c:	b0 c0       	rjmp	.+352    	; 0x9ae <__stack+0x14f>
 84e:	e9 2f       	mov	r30, r25
 850:	e0 61       	ori	r30, 0x10	; 16
 852:	be 2e       	mov	r11, r30
 854:	b4 fe       	sbrs	r11, 4
 856:	0d c0       	rjmp	.+26     	; 0x872 <__stack+0x13>
 858:	fb 2d       	mov	r31, r11
 85a:	f4 60       	ori	r31, 0x04	; 4
 85c:	bf 2e       	mov	r11, r31
 85e:	09 c0       	rjmp	.+18     	; 0x872 <__stack+0x13>
 860:	34 fe       	sbrs	r3, 4
 862:	0a c0       	rjmp	.+20     	; 0x878 <__stack+0x19>
 864:	29 2f       	mov	r18, r25
 866:	26 60       	ori	r18, 0x06	; 6
 868:	b2 2e       	mov	r11, r18
 86a:	06 c0       	rjmp	.+12     	; 0x878 <__stack+0x19>
 86c:	28 e0       	ldi	r18, 0x08	; 8
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	05 c0       	rjmp	.+10     	; 0x87c <__stack+0x1d>
 872:	20 e1       	ldi	r18, 0x10	; 16
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
 878:	20 e1       	ldi	r18, 0x10	; 16
 87a:	32 e0       	ldi	r19, 0x02	; 2
 87c:	f8 01       	movw	r30, r16
 87e:	b7 fe       	sbrs	r11, 7
 880:	07 c0       	rjmp	.+14     	; 0x890 <__stack+0x31>
 882:	60 81       	ld	r22, Z
 884:	71 81       	ldd	r23, Z+1	; 0x01
 886:	82 81       	ldd	r24, Z+2	; 0x02
 888:	93 81       	ldd	r25, Z+3	; 0x03
 88a:	0c 5f       	subi	r16, 0xFC	; 252
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	06 c0       	rjmp	.+12     	; 0x89c <__stack+0x3d>
 890:	60 81       	ld	r22, Z
 892:	71 81       	ldd	r23, Z+1	; 0x01
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 5f       	subi	r16, 0xFE	; 254
 89a:	1f 4f       	sbci	r17, 0xFF	; 255
 89c:	a3 01       	movw	r20, r6
 89e:	0e 94 33 05 	call	0xa66	; 0xa66 <__ultoa_invert>
 8a2:	88 2e       	mov	r8, r24
 8a4:	86 18       	sub	r8, r6
 8a6:	fb 2d       	mov	r31, r11
 8a8:	ff 77       	andi	r31, 0x7F	; 127
 8aa:	3f 2e       	mov	r3, r31
 8ac:	36 fe       	sbrs	r3, 6
 8ae:	0d c0       	rjmp	.+26     	; 0x8ca <__stack+0x6b>
 8b0:	23 2d       	mov	r18, r3
 8b2:	2e 7f       	andi	r18, 0xFE	; 254
 8b4:	a2 2e       	mov	r10, r18
 8b6:	89 14       	cp	r8, r9
 8b8:	58 f4       	brcc	.+22     	; 0x8d0 <__stack+0x71>
 8ba:	34 fe       	sbrs	r3, 4
 8bc:	0b c0       	rjmp	.+22     	; 0x8d4 <__stack+0x75>
 8be:	32 fc       	sbrc	r3, 2
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <__stack+0x75>
 8c2:	83 2d       	mov	r24, r3
 8c4:	8e 7e       	andi	r24, 0xEE	; 238
 8c6:	a8 2e       	mov	r10, r24
 8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <__stack+0x75>
 8ca:	b8 2c       	mov	r11, r8
 8cc:	a3 2c       	mov	r10, r3
 8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <__stack+0x77>
 8d0:	b8 2c       	mov	r11, r8
 8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <__stack+0x77>
 8d4:	b9 2c       	mov	r11, r9
 8d6:	a4 fe       	sbrs	r10, 4
 8d8:	0f c0       	rjmp	.+30     	; 0x8f8 <__stack+0x99>
 8da:	fe 01       	movw	r30, r28
 8dc:	e8 0d       	add	r30, r8
 8de:	f1 1d       	adc	r31, r1
 8e0:	80 81       	ld	r24, Z
 8e2:	80 33       	cpi	r24, 0x30	; 48
 8e4:	21 f4       	brne	.+8      	; 0x8ee <__stack+0x8f>
 8e6:	9a 2d       	mov	r25, r10
 8e8:	99 7e       	andi	r25, 0xE9	; 233
 8ea:	a9 2e       	mov	r10, r25
 8ec:	09 c0       	rjmp	.+18     	; 0x900 <__stack+0xa1>
 8ee:	a2 fe       	sbrs	r10, 2
 8f0:	06 c0       	rjmp	.+12     	; 0x8fe <__stack+0x9f>
 8f2:	b3 94       	inc	r11
 8f4:	b3 94       	inc	r11
 8f6:	04 c0       	rjmp	.+8      	; 0x900 <__stack+0xa1>
 8f8:	8a 2d       	mov	r24, r10
 8fa:	86 78       	andi	r24, 0x86	; 134
 8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0xa1>
 8fe:	b3 94       	inc	r11
 900:	a3 fc       	sbrc	r10, 3
 902:	11 c0       	rjmp	.+34     	; 0x926 <__stack+0xc7>
 904:	a0 fe       	sbrs	r10, 0
 906:	06 c0       	rjmp	.+12     	; 0x914 <__stack+0xb5>
 908:	b2 14       	cp	r11, r2
 90a:	88 f4       	brcc	.+34     	; 0x92e <__stack+0xcf>
 90c:	28 0c       	add	r2, r8
 90e:	92 2c       	mov	r9, r2
 910:	9b 18       	sub	r9, r11
 912:	0e c0       	rjmp	.+28     	; 0x930 <__stack+0xd1>
 914:	b2 14       	cp	r11, r2
 916:	60 f4       	brcc	.+24     	; 0x930 <__stack+0xd1>
 918:	b6 01       	movw	r22, r12
 91a:	80 e2       	ldi	r24, 0x20	; 32
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 922:	b3 94       	inc	r11
 924:	f7 cf       	rjmp	.-18     	; 0x914 <__stack+0xb5>
 926:	b2 14       	cp	r11, r2
 928:	18 f4       	brcc	.+6      	; 0x930 <__stack+0xd1>
 92a:	2b 18       	sub	r2, r11
 92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0xd3>
 92e:	98 2c       	mov	r9, r8
 930:	21 2c       	mov	r2, r1
 932:	a4 fe       	sbrs	r10, 4
 934:	10 c0       	rjmp	.+32     	; 0x956 <__stack+0xf7>
 936:	b6 01       	movw	r22, r12
 938:	80 e3       	ldi	r24, 0x30	; 48
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 940:	a2 fe       	sbrs	r10, 2
 942:	17 c0       	rjmp	.+46     	; 0x972 <__stack+0x113>
 944:	a1 fc       	sbrc	r10, 1
 946:	03 c0       	rjmp	.+6      	; 0x94e <__stack+0xef>
 948:	88 e7       	ldi	r24, 0x78	; 120
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	02 c0       	rjmp	.+4      	; 0x952 <__stack+0xf3>
 94e:	88 e5       	ldi	r24, 0x58	; 88
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	b6 01       	movw	r22, r12
 954:	0c c0       	rjmp	.+24     	; 0x96e <__stack+0x10f>
 956:	8a 2d       	mov	r24, r10
 958:	86 78       	andi	r24, 0x86	; 134
 95a:	59 f0       	breq	.+22     	; 0x972 <__stack+0x113>
 95c:	a1 fe       	sbrs	r10, 1
 95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x105>
 960:	8b e2       	ldi	r24, 0x2B	; 43
 962:	01 c0       	rjmp	.+2      	; 0x966 <__stack+0x107>
 964:	80 e2       	ldi	r24, 0x20	; 32
 966:	a7 fc       	sbrc	r10, 7
 968:	8d e2       	ldi	r24, 0x2D	; 45
 96a:	b6 01       	movw	r22, r12
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 972:	89 14       	cp	r8, r9
 974:	38 f4       	brcc	.+14     	; 0x984 <__stack+0x125>
 976:	b6 01       	movw	r22, r12
 978:	80 e3       	ldi	r24, 0x30	; 48
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 980:	9a 94       	dec	r9
 982:	f7 cf       	rjmp	.-18     	; 0x972 <__stack+0x113>
 984:	8a 94       	dec	r8
 986:	f3 01       	movw	r30, r6
 988:	e8 0d       	add	r30, r8
 98a:	f1 1d       	adc	r31, r1
 98c:	80 81       	ld	r24, Z
 98e:	b6 01       	movw	r22, r12
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 996:	81 10       	cpse	r8, r1
 998:	f5 cf       	rjmp	.-22     	; 0x984 <__stack+0x125>
 99a:	22 20       	and	r2, r2
 99c:	09 f4       	brne	.+2      	; 0x9a0 <__stack+0x141>
 99e:	42 ce       	rjmp	.-892    	; 0x624 <vfprintf+0x24>
 9a0:	b6 01       	movw	r22, r12
 9a2:	80 e2       	ldi	r24, 0x20	; 32
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 9aa:	2a 94       	dec	r2
 9ac:	f6 cf       	rjmp	.-20     	; 0x99a <__stack+0x13b>
 9ae:	f6 01       	movw	r30, r12
 9b0:	86 81       	ldd	r24, Z+6	; 0x06
 9b2:	97 81       	ldd	r25, Z+7	; 0x07
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__stack+0x15b>
 9b6:	8f ef       	ldi	r24, 0xFF	; 255
 9b8:	9f ef       	ldi	r25, 0xFF	; 255
 9ba:	2b 96       	adiw	r28, 0x0b	; 11
 9bc:	e2 e1       	ldi	r30, 0x12	; 18
 9be:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__epilogue_restores__>

000009c2 <strnlen_P>:
 9c2:	fc 01       	movw	r30, r24
 9c4:	05 90       	lpm	r0, Z+
 9c6:	61 50       	subi	r22, 0x01	; 1
 9c8:	70 40       	sbci	r23, 0x00	; 0
 9ca:	01 10       	cpse	r0, r1
 9cc:	d8 f7       	brcc	.-10     	; 0x9c4 <strnlen_P+0x2>
 9ce:	80 95       	com	r24
 9d0:	90 95       	com	r25
 9d2:	8e 0f       	add	r24, r30
 9d4:	9f 1f       	adc	r25, r31
 9d6:	08 95       	ret

000009d8 <strnlen>:
 9d8:	fc 01       	movw	r30, r24
 9da:	61 50       	subi	r22, 0x01	; 1
 9dc:	70 40       	sbci	r23, 0x00	; 0
 9de:	01 90       	ld	r0, Z+
 9e0:	01 10       	cpse	r0, r1
 9e2:	d8 f7       	brcc	.-10     	; 0x9da <strnlen+0x2>
 9e4:	80 95       	com	r24
 9e6:	90 95       	com	r25
 9e8:	8e 0f       	add	r24, r30
 9ea:	9f 1f       	adc	r25, r31
 9ec:	08 95       	ret

000009ee <fputc>:
 9ee:	0f 93       	push	r16
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	fb 01       	movw	r30, r22
 9f8:	23 81       	ldd	r18, Z+3	; 0x03
 9fa:	21 fd       	sbrc	r18, 1
 9fc:	03 c0       	rjmp	.+6      	; 0xa04 <fputc+0x16>
 9fe:	8f ef       	ldi	r24, 0xFF	; 255
 a00:	9f ef       	ldi	r25, 0xFF	; 255
 a02:	2c c0       	rjmp	.+88     	; 0xa5c <fputc+0x6e>
 a04:	22 ff       	sbrs	r18, 2
 a06:	16 c0       	rjmp	.+44     	; 0xa34 <fputc+0x46>
 a08:	46 81       	ldd	r20, Z+6	; 0x06
 a0a:	57 81       	ldd	r21, Z+7	; 0x07
 a0c:	24 81       	ldd	r18, Z+4	; 0x04
 a0e:	35 81       	ldd	r19, Z+5	; 0x05
 a10:	42 17       	cp	r20, r18
 a12:	53 07       	cpc	r21, r19
 a14:	44 f4       	brge	.+16     	; 0xa26 <fputc+0x38>
 a16:	a0 81       	ld	r26, Z
 a18:	b1 81       	ldd	r27, Z+1	; 0x01
 a1a:	9d 01       	movw	r18, r26
 a1c:	2f 5f       	subi	r18, 0xFF	; 255
 a1e:	3f 4f       	sbci	r19, 0xFF	; 255
 a20:	31 83       	std	Z+1, r19	; 0x01
 a22:	20 83       	st	Z, r18
 a24:	8c 93       	st	X, r24
 a26:	26 81       	ldd	r18, Z+6	; 0x06
 a28:	37 81       	ldd	r19, Z+7	; 0x07
 a2a:	2f 5f       	subi	r18, 0xFF	; 255
 a2c:	3f 4f       	sbci	r19, 0xFF	; 255
 a2e:	37 83       	std	Z+7, r19	; 0x07
 a30:	26 83       	std	Z+6, r18	; 0x06
 a32:	14 c0       	rjmp	.+40     	; 0xa5c <fputc+0x6e>
 a34:	8b 01       	movw	r16, r22
 a36:	ec 01       	movw	r28, r24
 a38:	fb 01       	movw	r30, r22
 a3a:	00 84       	ldd	r0, Z+8	; 0x08
 a3c:	f1 85       	ldd	r31, Z+9	; 0x09
 a3e:	e0 2d       	mov	r30, r0
 a40:	09 95       	icall
 a42:	89 2b       	or	r24, r25
 a44:	e1 f6       	brne	.-72     	; 0x9fe <fputc+0x10>
 a46:	d8 01       	movw	r26, r16
 a48:	16 96       	adiw	r26, 0x06	; 6
 a4a:	8d 91       	ld	r24, X+
 a4c:	9c 91       	ld	r25, X
 a4e:	17 97       	sbiw	r26, 0x07	; 7
 a50:	01 96       	adiw	r24, 0x01	; 1
 a52:	17 96       	adiw	r26, 0x07	; 7
 a54:	9c 93       	st	X, r25
 a56:	8e 93       	st	-X, r24
 a58:	16 97       	sbiw	r26, 0x06	; 6
 a5a:	ce 01       	movw	r24, r28
 a5c:	df 91       	pop	r29
 a5e:	cf 91       	pop	r28
 a60:	1f 91       	pop	r17
 a62:	0f 91       	pop	r16
 a64:	08 95       	ret

00000a66 <__ultoa_invert>:
 a66:	fa 01       	movw	r30, r20
 a68:	aa 27       	eor	r26, r26
 a6a:	28 30       	cpi	r18, 0x08	; 8
 a6c:	51 f1       	breq	.+84     	; 0xac2 <__ultoa_invert+0x5c>
 a6e:	20 31       	cpi	r18, 0x10	; 16
 a70:	81 f1       	breq	.+96     	; 0xad2 <__ultoa_invert+0x6c>
 a72:	e8 94       	clt
 a74:	6f 93       	push	r22
 a76:	6e 7f       	andi	r22, 0xFE	; 254
 a78:	6e 5f       	subi	r22, 0xFE	; 254
 a7a:	7f 4f       	sbci	r23, 0xFF	; 255
 a7c:	8f 4f       	sbci	r24, 0xFF	; 255
 a7e:	9f 4f       	sbci	r25, 0xFF	; 255
 a80:	af 4f       	sbci	r26, 0xFF	; 255
 a82:	b1 e0       	ldi	r27, 0x01	; 1
 a84:	3e d0       	rcall	.+124    	; 0xb02 <__ultoa_invert+0x9c>
 a86:	b4 e0       	ldi	r27, 0x04	; 4
 a88:	3c d0       	rcall	.+120    	; 0xb02 <__ultoa_invert+0x9c>
 a8a:	67 0f       	add	r22, r23
 a8c:	78 1f       	adc	r23, r24
 a8e:	89 1f       	adc	r24, r25
 a90:	9a 1f       	adc	r25, r26
 a92:	a1 1d       	adc	r26, r1
 a94:	68 0f       	add	r22, r24
 a96:	79 1f       	adc	r23, r25
 a98:	8a 1f       	adc	r24, r26
 a9a:	91 1d       	adc	r25, r1
 a9c:	a1 1d       	adc	r26, r1
 a9e:	6a 0f       	add	r22, r26
 aa0:	71 1d       	adc	r23, r1
 aa2:	81 1d       	adc	r24, r1
 aa4:	91 1d       	adc	r25, r1
 aa6:	a1 1d       	adc	r26, r1
 aa8:	20 d0       	rcall	.+64     	; 0xaea <__ultoa_invert+0x84>
 aaa:	09 f4       	brne	.+2      	; 0xaae <__ultoa_invert+0x48>
 aac:	68 94       	set
 aae:	3f 91       	pop	r19
 ab0:	2a e0       	ldi	r18, 0x0A	; 10
 ab2:	26 9f       	mul	r18, r22
 ab4:	11 24       	eor	r1, r1
 ab6:	30 19       	sub	r19, r0
 ab8:	30 5d       	subi	r19, 0xD0	; 208
 aba:	31 93       	st	Z+, r19
 abc:	de f6       	brtc	.-74     	; 0xa74 <__ultoa_invert+0xe>
 abe:	cf 01       	movw	r24, r30
 ac0:	08 95       	ret
 ac2:	46 2f       	mov	r20, r22
 ac4:	47 70       	andi	r20, 0x07	; 7
 ac6:	40 5d       	subi	r20, 0xD0	; 208
 ac8:	41 93       	st	Z+, r20
 aca:	b3 e0       	ldi	r27, 0x03	; 3
 acc:	0f d0       	rcall	.+30     	; 0xaec <__ultoa_invert+0x86>
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__ultoa_invert+0x5c>
 ad0:	f6 cf       	rjmp	.-20     	; 0xabe <__ultoa_invert+0x58>
 ad2:	46 2f       	mov	r20, r22
 ad4:	4f 70       	andi	r20, 0x0F	; 15
 ad6:	40 5d       	subi	r20, 0xD0	; 208
 ad8:	4a 33       	cpi	r20, 0x3A	; 58
 ada:	18 f0       	brcs	.+6      	; 0xae2 <__ultoa_invert+0x7c>
 adc:	49 5d       	subi	r20, 0xD9	; 217
 ade:	31 fd       	sbrc	r19, 1
 ae0:	40 52       	subi	r20, 0x20	; 32
 ae2:	41 93       	st	Z+, r20
 ae4:	02 d0       	rcall	.+4      	; 0xaea <__ultoa_invert+0x84>
 ae6:	a9 f7       	brne	.-22     	; 0xad2 <__ultoa_invert+0x6c>
 ae8:	ea cf       	rjmp	.-44     	; 0xabe <__ultoa_invert+0x58>
 aea:	b4 e0       	ldi	r27, 0x04	; 4
 aec:	a6 95       	lsr	r26
 aee:	97 95       	ror	r25
 af0:	87 95       	ror	r24
 af2:	77 95       	ror	r23
 af4:	67 95       	ror	r22
 af6:	ba 95       	dec	r27
 af8:	c9 f7       	brne	.-14     	; 0xaec <__ultoa_invert+0x86>
 afa:	00 97       	sbiw	r24, 0x00	; 0
 afc:	61 05       	cpc	r22, r1
 afe:	71 05       	cpc	r23, r1
 b00:	08 95       	ret
 b02:	9b 01       	movw	r18, r22
 b04:	ac 01       	movw	r20, r24
 b06:	0a 2e       	mov	r0, r26
 b08:	06 94       	lsr	r0
 b0a:	57 95       	ror	r21
 b0c:	47 95       	ror	r20
 b0e:	37 95       	ror	r19
 b10:	27 95       	ror	r18
 b12:	ba 95       	dec	r27
 b14:	c9 f7       	brne	.-14     	; 0xb08 <__ultoa_invert+0xa2>
 b16:	62 0f       	add	r22, r18
 b18:	73 1f       	adc	r23, r19
 b1a:	84 1f       	adc	r24, r20
 b1c:	95 1f       	adc	r25, r21
 b1e:	a0 1d       	adc	r26, r0
 b20:	08 95       	ret

00000b22 <__prologue_saves__>:
 b22:	2f 92       	push	r2
 b24:	3f 92       	push	r3
 b26:	4f 92       	push	r4
 b28:	5f 92       	push	r5
 b2a:	6f 92       	push	r6
 b2c:	7f 92       	push	r7
 b2e:	8f 92       	push	r8
 b30:	9f 92       	push	r9
 b32:	af 92       	push	r10
 b34:	bf 92       	push	r11
 b36:	cf 92       	push	r12
 b38:	df 92       	push	r13
 b3a:	ef 92       	push	r14
 b3c:	ff 92       	push	r15
 b3e:	0f 93       	push	r16
 b40:	1f 93       	push	r17
 b42:	cf 93       	push	r28
 b44:	df 93       	push	r29
 b46:	cd b7       	in	r28, 0x3d	; 61
 b48:	de b7       	in	r29, 0x3e	; 62
 b4a:	ca 1b       	sub	r28, r26
 b4c:	db 0b       	sbc	r29, r27
 b4e:	0f b6       	in	r0, 0x3f	; 63
 b50:	f8 94       	cli
 b52:	de bf       	out	0x3e, r29	; 62
 b54:	0f be       	out	0x3f, r0	; 63
 b56:	cd bf       	out	0x3d, r28	; 61
 b58:	09 94       	ijmp

00000b5a <__epilogue_restores__>:
 b5a:	2a 88       	ldd	r2, Y+18	; 0x12
 b5c:	39 88       	ldd	r3, Y+17	; 0x11
 b5e:	48 88       	ldd	r4, Y+16	; 0x10
 b60:	5f 84       	ldd	r5, Y+15	; 0x0f
 b62:	6e 84       	ldd	r6, Y+14	; 0x0e
 b64:	7d 84       	ldd	r7, Y+13	; 0x0d
 b66:	8c 84       	ldd	r8, Y+12	; 0x0c
 b68:	9b 84       	ldd	r9, Y+11	; 0x0b
 b6a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b6c:	b9 84       	ldd	r11, Y+9	; 0x09
 b6e:	c8 84       	ldd	r12, Y+8	; 0x08
 b70:	df 80       	ldd	r13, Y+7	; 0x07
 b72:	ee 80       	ldd	r14, Y+6	; 0x06
 b74:	fd 80       	ldd	r15, Y+5	; 0x05
 b76:	0c 81       	ldd	r16, Y+4	; 0x04
 b78:	1b 81       	ldd	r17, Y+3	; 0x03
 b7a:	aa 81       	ldd	r26, Y+2	; 0x02
 b7c:	b9 81       	ldd	r27, Y+1	; 0x01
 b7e:	ce 0f       	add	r28, r30
 b80:	d1 1d       	adc	r29, r1
 b82:	0f b6       	in	r0, 0x3f	; 63
 b84:	f8 94       	cli
 b86:	de bf       	out	0x3e, r29	; 62
 b88:	0f be       	out	0x3f, r0	; 63
 b8a:	cd bf       	out	0x3d, r28	; 61
 b8c:	ed 01       	movw	r28, r26
 b8e:	08 95       	ret

00000b90 <_exit>:
 b90:	f8 94       	cli

00000b92 <__stop_program>:
 b92:	ff cf       	rjmp	.-2      	; 0xb92 <__stop_program>
